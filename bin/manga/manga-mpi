#!/usr/bin/env python
"""MPI wrapper for the MaNGA project.

manga-mpi --coadds

"""
import os, time, pdb
import numpy as np

def main():
    """Top-level wrapper.

    """
    import legacyhalos.io
    import legacyhalos.manga

    from legacypipe.runs import get_survey
    from legacyhalos.manga import ZCOLUMN, RACOLUMN, DECCOLUMN, GALAXYCOLUMN, RADIUSFACTOR, MANGA_RADIUS

    basedir = legacyhalos.io.legacyhalos_dir()
    datadir = legacyhalos.io.legacyhalos_data_dir()
    htmldir = legacyhalos.io.legacyhalos_html_dir()
    
    args = legacyhalos.manga.mpi_args()

    if args.mpi:
        from mpi4py import MPI
        comm = MPI.COMM_WORLD
        rank, size = comm.rank, comm.size
    else:
        comm = None
        rank, size = 0, 1

    # Read and broadcast the sample.
    sample = None
    if rank == 0:
        print('$LEGACYHALOS_DIR={}'.format(basedir))
        print('$LEGACYHALOS_DATA_DIR={}'.format(datadir))
        print('$LEGACYHALOS_HTML_DIR={}'.format(htmldir))
        sample = legacyhalos.manga.read_sample(first=args.first, last=args.last,
                                               galaxylist=args.galaxylist,
                                               verbose=args.verbose)
        if len(sample) == 0:
            return

    if comm:
        sample = comm.bcast(sample, root=0)

    # Building the web-page and integrating the ellipse-fitting results work on
    # the full sample, so do that here and then return.
    if args.htmlindex and rank == 0:
        legacyhalos.manga.make_html(sample, survey=None, pixscale=args.pixscale,
                                    racolumn=RACOLUMN, deccolumn=DECCOLUMN, #diamcolumn=DIAMCOLUMN,
                                    zcolumn=ZCOLUMN, nproc=args.nproc, clobber=args.clobber,
                                    makeplots=False, verbose=args.verbose, htmldir=args.htmldir,
                                    ccdqa=args.ccdqa, args=args)
        return
    
    # Determine how many more galaxies we need to analyze and divide them across
    # ranks.
    if rank == 0:
        suffix, groups, _, fail = legacyhalos.manga.missing_files(args, sample, size)
    else:
        groups, suffix = [], ''

    if comm:
        groups = comm.bcast(groups, root=0)
        suffix = comm.bcast(suffix, root=0)

    if rank == 0:
        ntodo = len(np.hstack(groups))
        print('{} left to do: {} / {} divided across {} rank(s).'.format(
            suffix.upper(), ntodo, len(sample), size), flush=True)
        
    # Wait for all ranks to catch up.
    if comm is not None:
        comm.barrier()

    if len(groups[rank]) == 0:
        print('{} for all {} galaxies on rank {} are complete!'.format(
            suffix.upper(), len(sample), rank), flush=True)
        return
    else:
        print(' Rank {}: {} galaxies left to do.'.format(rank, len(groups[rank])), flush=True)
        if rank == 0 and args.count:
            if args.debug:
                if len(fail[rank]) > 0:
                    print('{} failures: {} / {}'.format(suffix.upper(), len(fail[rank]), len(sample)), flush=True)
                    galaxy, galaxydir = legacyhalos.manga.get_galaxy_galaxydir(sample[fail[rank]])
                    for ii, dd in zip(fail[rank], np.atleast_1d(galaxydir)):
                        print('  {} {}'.format(ii, dd))

                todo = np.hstack(groups)
                if len(todo) > 0:
                    #print('Galaxies left to do:')
                    galaxy, galaxydir = legacyhalos.manga.get_galaxy_galaxydir(sample[todo])
                    for ii, dd in zip(todo, np.atleast_1d(galaxydir)):
                        print('  {} {}'.format(ii, dd))
            return
        
    # Loop on the remaining objects.
    print('Starting {} {} on rank {} with {} cores on {}'.format(
        len(groups[rank]), suffix.upper(), rank, args.nproc, time.asctime()),
        flush=True)
    
    tall = time.time()
    for count, ii in enumerate(groups[rank]):
        onegal = sample[ii]
        galaxy, galaxydir = legacyhalos.manga.get_galaxy_galaxydir(onegal)
        if not os.path.isdir(galaxydir):
            os.makedirs(galaxydir, exist_ok=True)

        #if (count+1) % 10 == 0:
        print('Rank {:03d} ({} / {}): {} (index {})'.format(
            rank, count+1, len(groups[rank]), galaxydir, ii), flush=True)

        if args.debug:
            logfile = None
        else:
            logfile = os.path.join(galaxydir, '{}-{}.log'.format(galaxy, suffix))
        
        # Need the object "radius" to build the coadds.
        radius_mosaic_arcsec = MANGA_RADIUS * RADIUSFACTOR # [arcsec]

        run = legacyhalos.io.get_run(onegal, racolumn=RACOLUMN, deccolumn=DECCOLUMN)
        survey = get_survey(run, output_dir=galaxydir)

        if args.coadds:
            from legacyhalos.mpi import call_custom_coadds
            call_custom_coadds(onegal, galaxy, survey, run, radius_mosaic_arcsec, nproc=args.nproc,
                               pixscale=args.pixscale, racolumn=RACOLUMN, deccolumn=DECCOLUMN,
                               largegalaxy=False, pipeline=False, custom=True,
                               apodize=False, unwise=True, galex=True, force=args.force, plots=False,
                               verbose=args.verbose, cleanup=True, write_all_pickles=True,
                               just_coadds=args.just_coadds, no_gaia=False, no_tycho=False,
                               require_grz=True, debug=args.debug, logfile=logfile)

        if args.pipeline_coadds:
            from legacyhalos.mpi import call_custom_coadds
            # No unwise here (we do it in --coadds) and don't care about the
            # model images.
            call_custom_coadds(onegal, galaxy, survey, run, radius_mosaic_arcsec, nproc=args.nproc,
                               pixscale=args.pixscale, racolumn=RACOLUMN, deccolumn=DECCOLUMN,
                               largegalaxy=False, pipeline=True, custom=False,
                               apodize=False, unwise=False, force=args.force, plots=False,
                               verbose=args.verbose, cleanup=True, write_all_pickles=True,
                               just_coadds=args.just_coadds,
                               no_gaia=False, no_tycho=False, debug=args.debug, logfile=logfile)

        if args.ellipse:
            from legacyhalos.mpi import call_ellipse
            call_ellipse(onegal, galaxy=galaxy, galaxydir=galaxydir, pixscale=args.pixscale,
                         nproc=args.nproc, verbose=args.verbose, debug=args.debug,
                         unwise=True, galex=True,
                         logfile=logfile, largegalaxy=False, pipeline=False)
                             
        if args.htmlplots:
            from legacyhalos.mpi import call_htmlplots
            if radius_mosaic_arcsec > 6 * 60: # [>6] arcmin
                barlabel = '2 arcmin'
                barlen = np.ceil(120 / args.pixscale).astype(int) # [pixels]
            elif (radius_mosaic_arcsec > 3 * 60) & (radius_mosaic_arcsec < 6 * 60): # [3-6] arcmin
                barlabel = '1 arcmin'
                barlen = np.ceil(60 / args.pixscale).astype(int) # [pixels]
            else:
                barlabel = '30 arcsec'
                barlen = np.ceil(30 / args.pixscale).astype(int) # [pixels]
            call_htmlplots(onegal, galaxy, survey, pixscale=args.pixscale, nproc=args.nproc,
                           verbose=args.verbose, debug=args.debug, clobber=args.clobber,
                           ccdqa=args.ccdqa, logfile=logfile, zcolumn=ZCOLUMN,
                           htmldir=htmldir, datadir=datadir,
                           barlen=barlen, barlabel=barlabel,
                           radius_mosaic_arcsec=radius_mosaic_arcsec,
                           largegalaxy=False, galex=True,
                           get_galaxy_galaxydir=legacyhalos.manga.get_galaxy_galaxydir)

    # Wait for all ranks to finish.
    if comm is not None:
        comm.barrier()
                
    if rank == 0:
        print('Finished {} {} at {} after {:.3f} minutes'.format(
            ntodo, suffix.upper(), time.asctime(), (time.time() - tall) / 60 ), flush=True)
        _, groups, _, _ = legacyhalos.manga.missing_files(args, sample, size, clobber_overwrite=False)
        if len(groups) > 0:
            stilltodo = len(np.hstack(groups))
        else:
            stilltodo = 0
        print('{} left to do: {} / {}.'.format(suffix.upper(), stilltodo, ntodo), flush=True)

if __name__ == '__main__':
    main()
